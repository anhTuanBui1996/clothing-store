package com.api.service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.api.service.dto.PermissionDto;
import com.api.service.entity.Role;
import com.api.service.entity.Menu;
import com.api.service.entity.Permission;
import com.api.service.entity.composite.PermissionKey;
import com.api.service.exception.UserServiceCustomException;
import com.api.service.repository.MenuRepository;
import com.api.service.repository.PermissionKeyRepository;
import com.api.service.repository.PermissionRepository;
import com.api.service.repository.RoleRepository;

@Service
public class PermissionService implements ServiceUtils<Permission, PermissionDto> {

	@Autowired
	PermissionRepository permissionRepository;

	@Autowired
	RoleRepository roleRepository;

	@Autowired
	MenuRepository menuRepository;

	public List<Permission> getPermissionByRoleId(UUID roleId) {
		if (roleRepository.existsById(roleId)) {
			return permissionRepository.findByRoleId(roleId);
		}
		throw new UserServiceCustomException("Role with given Id not found", "ROLE_NOT_FOUND");
	}

	public List<PermissionDto> getPermissionByMenuId(UUID menuId) {
		Menu menu = menuRepository.findById(menuId)
				.orElseThrow(() -> new UserServiceCustomException("Menu with given Id not found", "MENU_NOT FOUND"));
		if (menu == null) {
			return null;
		}
		List<PermissionDto> resultList = new ArrayList<PermissionDto>();
		permissionKeyRepository.findByMenuId(menuId).forEach((PermissionKey key) -> {
			permissionRepository.findById(key).ifPresent((Permission entity) -> {
				resultList.add(entity.convertEntityToDto());
			});
		});
		return resultList;
	}

	public PermissionDto savePermission(PermissionDto dto) {
		Permission entity = dto.convertFromDtoToEntity();
		if (entity != null) {
			return permissionRepository.save(entity).convertEntityToDto();
		}

		return null;
	}

	@Override
	public Permission convertFromDtoToEntity(PermissionDto dto) {
		Permission entity = new Permission();
		entity.setId(dto.getId());
		entity.setCreatedDate(dto.getCreatedDate());
		entity.setCreatedBy(dto.getCreatedBy());
		entity.setLastModifiedDate(dto.getLastModifiedDate());
		entity.setLastModifiedBy(dto.getLastModifiedBy());
		
		entity.setRoleId(dto.getRole());
		entity.setMenuId(dto.getMenu());
		
		
		return null;
	}

}
