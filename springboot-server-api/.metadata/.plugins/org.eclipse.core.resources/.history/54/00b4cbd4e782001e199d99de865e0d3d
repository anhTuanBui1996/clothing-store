package com.api.service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.api.service.dto.UserDto;
import com.api.service.entity.User;
import com.api.service.exception.UserServiceCustomException;
import com.api.service.repository.UserRepository;

@Service
public class UserService {

	@Autowired
	UserRepository userRepository;

	public List<User> getAllUser() {
		List<User> users = new ArrayList<>();
		userRepository.findAll().forEach(user -> users.add(user));
		return users;
	}

	public List<UserDto> getAllUserDto() {
		List<UserDto> users = new ArrayList<>();
		userRepository.findAll().forEach(user -> users.add(user.convertEntityToDto()));
		return users;
	}

	public UserDto getUserById(UUID id) {
		List<User> entity = userRepository.findById(id);
		return entity.get(0).convertEntityToDto();
	}

	public UserDto getUserByEmailAndPassword(boolean isAdmin, String email, String password) {
		List<User> foundUsers = userRepository.findByIsAdminAndEmailAndPassword(isAdmin, email, password);
		if (foundUsers.isEmpty()) {
			throw new UserServiceCustomException("User with given username and password not found",
					"USER_NOT_FOUND_EMAIL_PASSWORD");
		}
		User foundUser = foundUsers.get(0);
		return foundUser.convertEntityToDto();
	}

	public User createUser(User user) {
		if (userRepository.findById(user.getId()).isEmpty()) {
			return userRepository.save(user);
		}

		throw new UserServiceCustomException("User with given Id is already existed", "USER_EXISTED");
	}

	public UserDto updateUser(UserDto dto) {
		List<User> entities = userRepository.findById(dto.getId());

		if (entities.size() > 0) {
			return userRepository.save(dto.convertDtoToEntity()).convertEntityToDto();
		}
		return null;
	}

	public UserDto updateUserPassword(UUID userId, String oldPassword, String newPassword) {
		List<User> entities = userRepository.findById(userId);
		if (entities.size() == 1) {
			User user = entities.get(0);

			if (user.getPassword() != oldPassword) {
				throw new UserServiceCustomException("User with given id and password is incorrect",
						"PASSWORD_INCORRECT");
			}

			user.setPassword(newPassword);
			return userRepository.save(user).convertEntityToDto();
		} else {
			throw new UserServiceCustomException("User with given id not found", "USER_NOT_FOUND");
		}
	}

	public boolean deleteUser(UUID userId) {
		User entity = userRepository.findById(userId)
				.orElseThrow(() -> new UserServiceCustomException("User with given Id not found", "USER_NOT_FOUND"));

		userRepository.delete(entity);
		return true;
	}
}
