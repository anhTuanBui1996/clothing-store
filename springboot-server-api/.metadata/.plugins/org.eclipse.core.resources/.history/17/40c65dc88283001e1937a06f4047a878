package com.api.service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.api.service.dto.RoleDto;
import com.api.service.entity.Role;
import com.api.service.exception.UserServiceCustomException;
import com.api.service.repository.RoleRepository;

@Service
public class RoleService implements ServiceUtils<Role, RoleDto> {

	@Autowired
	RoleRepository roleRepository;

	public Role createRole(Role role) {
		if (roleRepository.findById(role.getId()).isPresent()) {
			throw new UserServiceCustomException("Role with given Id is already existed", "ROLE_EXISTED");
		}
		return roleRepository.save(role);
	}

	public List<Role> getAllRole() {
		List<Role> roles = new ArrayList<>();
		roleRepository.findAll().forEach(role -> roles.add(role));
		return roles;
	}

	public Role getRoleById(UUID id) {
		Role role = roleRepository.findById(id)
				.orElseThrow(() -> new UserServiceCustomException("Role with given Id not found", "ROLE_NOT_FOUND"));
		return role;
	}

	public Role updateRole(Role role) {
		Role entity = roleRepository.findById(role.getId())
				.orElseThrow(() -> new UserServiceCustomException("Role with given Id not found", "ROLE_NOT_FOUND"));
		if (entity != null) {
			return roleRepository.save(role);
		}
		return null;
	}

	public boolean deleteRole(UUID id) {
		Role entity = roleRepository.findById(id)
				.orElseThrow(() -> new UserServiceCustomException("Role with given Id not found", "ROLE_NOT_FOUND"));
		if (entity != null) {
			roleRepository.deleteById(id);
			return true;
		}
		return false;
	}

	@Override
	public Role convertFromDtoToEntity(RoleDto dto) {
		Role entity = new Role();
		entity.setId(dto.getId());
		entity.setCreatedDate(dto.getCreatedDate());
		entity.setCreatedBy(dto.getCreatedBy());
		entity.setLastModifiedDate(dto.getLastModifiedDate());
		entity.setLastModifiedBy(dto.getLastModifiedBy());
		
		
		
		return entity;
	}
}
