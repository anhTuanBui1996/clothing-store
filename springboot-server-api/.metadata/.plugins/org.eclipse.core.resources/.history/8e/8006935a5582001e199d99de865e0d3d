package com.api.service;

import java.util.Date;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.api.service.dto.PermissionDto;
import com.api.service.entity.Role;
import com.api.service.entity.Menu;
import com.api.service.entity.Permission;
import com.api.service.entity.composite.PermissionKey;
import com.api.service.exception.UserServiceCustomException;
import com.api.service.repository.MenuRepository;
import com.api.service.repository.PermissionKeyRepository;
import com.api.service.repository.PermissionRepository;
import com.api.service.repository.RoleRepository;
import com.github.andrewoma.dexx.collection.ArrayList;
import com.github.andrewoma.dexx.collection.List;

@Service
public class PermissionService {
	@Autowired
	PermissionKeyRepository permissionKeyRepository;

	@Autowired
	PermissionRepository permissionRepository;

	@Autowired
	RoleRepository roleRepository;

	@Autowired
	MenuRepository menuRepository;

	public List<PermissionDto> getPermissionByRoleId(UUID roleId) {
		Role role = roleRepository.findById(roleId)
				.orElseThrow(() -> new UserServiceCustomException("Role with given Id not found", "ROLE_NOT FOUND"));
		if (role == null) {
			return null;
		}
		List<PermissionDto> resultList = new ArrayList();
		permissionKeyRepository.findByRoleId(roleId).forEach((PermissionKey key) -> {
			permissionRepository.findById(key).ifPresent((Permission entity) -> {
				resultList.append(convertEntityToDto(entity));
			});
		});
		return resultList;
	}

	public PermissionDto savePermission(PermissionDto dto) {
		UUID roleId = dto.getRole();
		UUID menuId = dto.getMenu();

		Role role = roleRepository.findById(roleId)
				.orElseThrow(() -> new UserServiceCustomException("Role with given Id not found", "ROLE_NOT FOUND"));
		Menu menu = menuRepository.findById(menuId)
				.orElseThrow(() -> new UserServiceCustomException("Menu with given Id not found", "MENU_NOT_FOUND"));

		return resultDto;
	}

	public PermissionDto convertEntityToDto(Permission entity) {
		PermissionKey key = entity.getPermissionId();
		PermissionDto dto = new PermissionDto(key.getId(), key.getCreatedDate(), key.getCreatedBy(),
				key.getLastModifiedDate(), key.getLastModifiedBy());

		dto.setCanCreate(entity.getCanCreate());
		dto.setCanRead(entity.getCanRead());
		dto.setCanUpdate(entity.getCanUpdate());
		dto.setCanDelete(entity.getCanDelete());

		return dto;
	}

	public Permission convertFromDtoToPermission(PermissionDto dto) {
		PermissionKey key = new PermissionKey(dto.getId(), dto.getCreatedDate(), dto.getCreatedBy(),
				dto.getLastModifiedDate(), dto.getLastModifiedBy());
		Permission entity = new Permission();

		Role role = roleRepository.findById(dto.getRole())
				.orElseThrow(() -> new UserServiceCustomException("Role with given Id not found", "ROLE_NOT FOUND"));
		Menu menu = menuRepository.findById(dto.getMenu())
				.orElseThrow(() -> new UserServiceCustomException("Menu with given Id not found", "MENU_NOT_FOUND"));

		entity.setPermissionId(key);
		entity.setRole(role);
		entity.setMenu(menu);
		entity.setCanCreate(dto.isCanCreate());
		entity.setCanRead(dto.isCanRead());
		entity.setCanUpdate(dto.isCanUpdate());
		entity.setCanDelete(dto.isCanDelete());

		return entity;
	}
}
